// Generated by CoffeeScript 1.9.0
var Folder, async, cozydb, moment;

cozydb = require('cozydb');

moment = require('moment');

async = require('async');

module.exports = Folder = cozydb.getModel('Folder', {
  path: String,
  name: String,
  docType: String,
  creationDate: String,
  lastModification: String,
  size: Number,
  modificationHistory: Object,
  changeNotification: Boolean,
  clearance: cozydb.NoSchema,
  tags: [String]
});

Folder.all = function(params, callback) {
  return Folder.request("all", params, callback);
};

Folder.byFolder = function(params, callback) {
  return Folder.request("byFolder", params, callback);
};

Folder.byFullPath = function(params, callback) {
  return Folder.request("byFullPath", params, callback);
};

Folder.injectInheritedClearance = function(folders, callback) {
  return async.map(folders, function(folder, cb) {
    var regularFolder;
    regularFolder = folder.toObject();
    return folder.getInheritedClearance(function(err, inheritedClearance) {
      regularFolder.inheritedClearance = inheritedClearance;
      return cb(err, regularFolder);
    });
  }, callback);
};

Folder.createNewFolder = function(folder, callback) {
  return Folder.create(folder, function(err, newFolder) {
    if (err) {
      return callback(err);
    } else {
      return newFolder.index(["name"], function(err) {
        if (err) {
          console.log(err);
        }
        return callback(null, newFolder);
      });
    }
  });
};

Folder.allPath = function(callback) {
  return Folder.request("byFullPath", function(err, folders) {
    var folder, paths, _i, _len;
    if (err) {
      return callback(err);
    }
    paths = [];
    for (_i = 0, _len = folders.length; _i < _len; _i++) {
      folder = folders[_i];
      paths.push(folder.getFullPath());
    }
    return callback(null, paths);
  });
};

Folder.prototype.getFullPath = function() {
  return this.path + "/" + this.name;
};

Folder.prototype.getParents = function(callback) {
  var foldersOfPath, parent, parentFoldersPath;
  foldersOfPath = this.getFullPath().split('/');
  parentFoldersPath = [];
  while (foldersOfPath.length > 0) {
    parent = foldersOfPath.join('/');
    if (parent !== '' && parent !== this.getFullPath()) {
      parentFoldersPath.push(parent);
    }
    foldersOfPath.pop();
  }
  return Folder.byFullPath({
    keys: parentFoldersPath.reverse()
  }, callback);
};

Folder.prototype.getPublicURL = function(cb) {
  return cozydb.api.getCozyDomain((function(_this) {
    return function(err, domain) {
      var url;
      if (err) {
        return cb(err);
      }
      url = domain + "public/files/folders/" + _this.id;
      return cb(null, url);
    };
  })(this));
};

Folder.prototype.getInheritedClearance = function(callback) {
  return this.getParents(function(err, parents) {
    var inherited, isPublic;
    if (err != null) {
      return callback(err);
    }
    if (parents.length > 0 && parents[0].id === this.id) {
      parents.shift();
    }
    isPublic = false;
    inherited = parents != null ? parents.filter(function(parent) {
      if (parent.clearance == null) {
        parent.clearance = [];
      }
      if (isPublic) {
        return false;
      }
      if (parent.clearance === 'public') {
        isPublic = true;
      }
      return parent.clearance.length !== 0;
    }) : void 0;
    return callback(null, inherited);
  });
};

Folder.prototype.updateParentModifDate = function(callback) {
  return Folder.byFullPath({
    key: this.path
  }, (function(_this) {
    return function(err, parents) {
      var parent;
      if (err) {
        return callback(err);
      } else if (parents.length > 0) {
        parent = parents[0];
        parent.lastModification = moment().toISOString();
        return parent.save(callback);
      } else {
        return callback();
      }
    };
  })(this));
};

if (process.env.NODE_ENV === 'test') {
  Folder.prototype.index = function(fields, callback) {
    return callback(null);
  };
  Folder.prototype.search = function(query, callback) {
    return callback(null, []);
  };
}
